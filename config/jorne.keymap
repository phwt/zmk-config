/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define TYP 1
#define FNC 2
#define ADJ 3

#define BRID C_BRI_DN
#define BRIU C_BRI_UP

/ {
        macros {
            ZMK_MACRO(mlock,
                wait-ms = <10>;
                tap-ms = <10>;
                bindings = 
                    <&macro_press &kp LGUI &kp LCTRL>,
                    <&macro_tap &kp Q>,
                    <&macro_release &kp LGUI &kp LCTRL>;
            )
            ZMK_MACRO(marr, // Arrow function
                wait-ms = <10>;
                tap-ms = <10>;
                bindings = <&kp SPACE &kp EQUAL &kp GT &kp SPACE>;
            )
            ZMK_MACRO(mvbh, // Vim blackhole register
                wait-ms = <10>;
                tap-ms = <10>;
                bindings = <&kp SQT &kp UNDER>;
            )
            ZMK_MACRO(mfmt, // Format with Shift + Alt + F
                wait-ms = <10>;
                tap-ms = <10>;
                bindings = <&kp LS(LA(F))>;
            )
            ZMK_MACRO(mbkt,
                wait-ms = <10>;
                tap-ms = <10>;
                bindings = <&kp LBKT &kp RBKT>;
            )
            ZMK_MACRO(mbrc,
                wait-ms = <10>;
                tap-ms = <10>;
                bindings = <&kp LBRC &kp RBRC>;
            )
            ZMK_MACRO(mprn,
                wait-ms = <10>;
                tap-ms = <10>;
                bindings = <&kp LPRN &kp RPRN>;
            )
        };

        combos {
            compatible = "zmk,combos";
            combo_lang { // Trigger LALT+SPACE on SPACE+LALT 
                timeout-ms = <150>;
                key-positions = <39 40>;
                bindings = <&kp LA(SPACE)>;
            };
            combo_term { // SPACE+ESC to trigger terminal (LCTRL+GRAVE)
                timeout-ms = <200>;
                key-positions = <14 39>;
                bindings = <&kp LC(GRAVE)>;
            };
            combo_swap { // LGUI+ESC to trigger macOS group swapping (LGUI+GRAVE)
                timeout-ms = <200>;
                key-positions = <14 38>;
                bindings = <&kp LG(GRAVE)>;
            };
            combo_adj {
                timeout-ms = <50>;
                key-positions = <6 40>;
                bindings = <&sl ADJ>;
            };

            combo_lprn {
                timeout-ms = <50>;
                key-positions = <9 10>;
                bindings = <&kp LPRN>;
            };
            combo_rprn {
                timeout-ms = <50>;
                key-positions = <10 11>;
                bindings = <&kp RPRN>;
            };
            combo_prn {
                timeout-ms = <50>;
                key-positions = <9 11>;
                bindings = <&mprn>;
            };

            combo_lbrc {
                timeout-ms = <50>;
                key-positions = <22 23>;
                bindings = <&kp LBRC>;
            };
            combo_rbrc {
                timeout-ms = <50>;
                key-positions = <23 24>;
                bindings = <&kp RBRC>;
            };
            combo_brc {
                timeout-ms = <50>;
                key-positions = <22 24>;
                bindings = <&mbrc>;
            };

            combo_lbkt {
                timeout-ms = <50>;
                key-positions = <34 35>;
                bindings = <&kp LBKT>;
            };
            combo_rbkt {
                timeout-ms = <50>;
                key-positions = <35 36>;
                bindings = <&kp RBKT>;
            };
            combo_bkt {
                timeout-ms = <50>;
                key-positions = <34 36>;
                bindings = <&mbkt>;
            };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
    &none       &kp TAB     &kp Q       &kp W       &kp F       &kp P       &kp B               &kp J       &kp L       &kp U       &kp Y       &kp SEMI    &kp BSPC    &none
            &mt LCTRL ESC   &kp A       &kp R       &kp S       &kp T       &kp G               &kp M       &kp N       &kp E       &kp I       &kp O       &kp SQT
                &kp LSHFT   &kp Z       &kp X       &kp C       &kp D       &kp V               &kp K       &kp H       &kp COMMA   &kp DOT     &kp FSLH    &kp RSHFT
                                                    &kp LGUI    &kp SPACE   &kp LALT            &mo TYP     &lt FNC RET &kp RGUI
                        >;
                };

                type_layer {
                        bindings = <
    &trans      &trans      &kp N1      &kp N2      &kp N3      &kp N4      &kp N5              &kp N6      &kp N7      &kp N8      &kp N9      &kp N0      &kp DEL     &trans 
                &kp GRAVE   &trans      &trans      &trans      &kp PLUS    &trans              &trans      &kp UNDER   &trans      &kp LBKT    &kp RBKT    &kp LBRC
                &trans      &kp PIPE    &kp BSLH    &trans      &kp MINUS   &trans              &trans      &kp EQUAL   &trans      &kp MINUS   &kp EQUAL   &trans
                                                    &trans      &trans      &trans              &trans      &trans      &trans
                        >;
                };

                function_layer {
                        bindings = <
    &trans      &kp F12     &kp F1      &kp F2      &kp F3      &kp F4      &kp F5              &kp F6      &kp F7      &kp F8      &kp F9      &kp F10     &kp F11     &trans
                &mlock      &marr       &trans      &trans      &mfmt       &trans              &trans      &kp LEFT    &kp UP      &kp RIGHT   &trans      &mvbh
                &trans      &kp C_PREV  &kp C_PP    &kp C_NEXT  &kp BRID    &kp BRIU            &trans      &trans      &kp DOWN    &trans      &trans      &trans
                                                    &trans      &trans      &trans              &trans      &trans      &trans
                        >;
                };

                adjust_layer {
                        bindings = <
   &reset &bootloader  &none        &none        &none        &none        &none              &none        &none        &none        &none        &none         &bootloader &reset
          &bt BT_CLR   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4       &bt BT_SEL 4 &bt BT_SEL 3 &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0  &bt BT_CLR
        &out OUT_USB   &out OUT_BLE &none        &none        &none        &none              &none        &none        &none        &none        &none         &none
                                                 &trans       &none        &trans             &trans       &none        &trans
                        >;
                };
        };
};
